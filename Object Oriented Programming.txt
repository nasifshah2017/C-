Object Oriented Programming 

1. function person (name, favColor) {
		console.log("Hello, my name is "+ name +" and my favourite color is "+ favColor +".");
	}


	var john = {				// Object Definition
			name: "John Doe",
			favColor: "blue"
		}

	person(john.name, john.favColor)	// Calling function

	Output:

	Hello, my name is John Doe and my favourite color is blue. 

2. var john = {					// Object Definition
	name: "John Doe",			// Noun
	favColor: "blue",			// Noun
	greet: function() {			// Verb; Action; Behaviour
		console.log(""Hello, my name is "+ name +" and my favourite color is "+ favColor +".");
		}
	}

	john.greet();
	
	Output:
	
	Hello, my name is John Doe and my favourite color is blue.

3. 	Create a reusable recipe that spells out what a "person" object should be.
   	We can create a reusable blueprint like that by leveraging what is called a Constructor function.
	
	function Person() {			// Constructor Function
	  this.greet = function() {
		console.log("Hello there!");
	  }	
	}

	var john = new Person();		// Creating a new object using the Person blueprint
						// This means that our john object will contain anything 
						// that we list within our Constructor Function
	john.greet();
	
	Output:
	
	Hello there!

	var jane = new Person();
	jane.greet();

	Output:
	
	Hello there!

	The "this" keyword allows our blueprint function to be flexible and recyclable.
	The value of "this" changes depending on how, when and where the constructor function is called.
	When we created the John object and we called the Constructor function in that particular instance 
	the "this" keyword referred to our John object, but when we called the function again to call the Jane object
	in that instance when the function runs the keyword "this", it has the value of Jane object. 

	We can use the "this" keyword to refer to whichever object is currently being created. 

	function Person(fullName, favColor) {			
	  this.name = fullName;
	  this.favouriteColor = favColor;		
	  this.greet = function() {
		console.log("Hello, my name is " + this.name + " and my favourite color is " + this.favColor + ".");
	  }	
	}

	var john = new Person("John Doe", "blue");
	john.greet();

	var jane = new Person("Jane Smith", "green");
	jane.greet();

	Output:

	Hello, my name is John Doe and my favourite color is blue.
	Hello, my name is Jane Doe and my favourite color is green. 

	This time our Code is Object Oriented. 	
